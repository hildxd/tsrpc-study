// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  output          = "../node_modules/@prisma/client/generate-client"
  previewFeatures = ["fullTextSearch", "extendedWhereUnique", "filteredRelationCount", "fieldReference"]
  relationMode    = "prisma"
}

generator tsrpc {
  provider = "node ./node_modules/@stringke/prisma-generator-tsrpc"
  output   = "../src/shared/db"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// 用户
model User {
  /// 主键
  id       String   @id @default(uuid())
  /// 用户名
  username String   @unique
  /// 密码
  password String
  /// 创建时间
  createAt DateTime @default(now())
  /// 更新时间
  updateAt DateTime @updatedAt
  /// 用户角色
  roles    String[] @default(["user"])
  /// 用户信息
  profile  Profile?
  /// 用户文章
  posts    Post[]
  /// 用户标签
  tags     Tag[]
}

/// 用户信息
model Profile {
  /// 主键
  id        Int      @id @default(autoincrement())
  /// 用户昵称
  nickname  String   @unique
  /// 头像
  avatar    String   @default("https://c-ssl.dtstatic.com/uploads/blog/202206/12/20220612164733_72d8b.thumb.1000_0.jpg")
  /// 创建时间
  createdAt DateTime @default(now())
  /// 更新时间
  updatedAt DateTime @updatedAt
  /// 绑定的用户
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  /// 绑定的用户id
  userId    String   @unique
}

/// 文章
model Post {
  /// 主键
  id          Int       @id @default(autoincrement())
  /// 文章标题
  title       String
  /// 文章内容
  content     String    @db.Text
  /// 创建时间
  createdAt   DateTime  @default(now())
  /// 更新时间
  updatedAt   DateTime  @updatedAt
  /// 作者
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  /// 作者id
  authorId    String
  /// 是否发布
  published   Boolean   @default(false)
  /// 发布时间
  publishedAt DateTime?
  /// 文章标签
  tags        PostTag[]

  @@map("Posts")
}

/// 文章标签
model Tag {
  /// 主键
  id     Int       @id @default(autoincrement())
  ///  标签名
  name   String
  /// 关联文章
  posts  PostTag[]
  /// 作者
  user   User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  /// 作者id
  userId String
}

/// 文章标签关联表
model PostTag {
  /// 文章id
  postId Int
  /// 文章
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  /// 标签id
  tagId  Int
  /// 标签
  tag    Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([postId, tagId])
  @@map("PostTags")
}
